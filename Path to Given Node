Path to Given Node
Given a Binary Tree A containing N nodes, you need to find the path from Root to a given node B.

NOTE:

No two nodes in the tree have the same data values.
You can assume that B is present in tree A and a path always exists.


Problem Constraints
1 <= N <= 105

1 <= Data Values of Each Node <= N

1 <= B <= N



Input Format
First Argument represents pointer to the root of binary tree A.

Second Argument is an integer B denoting the node number.



Output Format
Return an one-dimensional array denoting the path from Root to the node B in order.



Example Input
Input 1:

 A =     
           1
         /   \
        2     3
       / \   / \
      4   5 6   7 

 B = 5
Input 2:

 A = 
            1
          /   \
         2     3
        / \ .   \
       4   5 .   6

 B = 1   


Example Output
Output 1:

 [1, 2, 5]
Output 2:

 [1]
 
 
 /**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    public ArrayList<Integer> solve(TreeNode A, int B) {
        ArrayList<Integer> ans= new ArrayList<>();
        if(correctpath(A,ans,B))   
       return ans;
       return ans;
    }
    boolean correctpath(TreeNode root,ArrayList<Integer> ans,int B){
        if(root==null){
            return false;
        }
        ans.add(root.val);
        if(root.val==B){
            return true;
        }
        if(correctpath(root.left,ans,B) || correctpath(root.right,ans,B)){
            return true;
        }
        ans.remove(ans.size()-1);
        return
        false;
    }
}
