 Level Order
 Given a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).



Problem Constraints
1 <= number of nodes <= 105



Input Format
First and only argument is root node of the binary tree, A.



Output Format
Return a 2D integer array denoting the zigzag level order traversal of the given binary tree.



Example Input
Input 1:

    3
   / \
  9  20
    /  \
   15   7
Input 2:

   1
  / \
 6   2
    /
   3


Example Output
Output 1:

 [
   [3],
   [9, 20],
   [15, 7]
 ]
Output 2:

 [ 
   [1]
   [6, 2]
   [3]
 ]
 
 /**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    public ArrayList<ArrayList<Integer>> levelOrder(TreeNode A) {
         ArrayList<ArrayList<Integer>> ans=new ArrayList<ArrayList<Integer>>();
         Queue <TreeNode> qs= new LinkedList<>();
        if(A==null){
            return ans;
        }
        qs.add(A);
        while(!qs.isEmpty()){
            int n=qs.size();
            ArrayList<Integer> level =new ArrayList<>();
            for(int i=0;i<n;i++){
               TreeNode s=qs.remove();
                level.add(s.val);
            if(s.left!=null){
                qs.add(s.left);
            }
            if(s.right!=null){
                qs.add(s.right);
            }

            }
            ans.add(level);
        }
        return ans;
    }
}
