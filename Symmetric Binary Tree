Symmetric Binary Tree
Given a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).



Problem Constraints
1 <= number of nodes <= 105



Input Format
First and only argument is the root node of the binary tree.



Output Format
Return 0 / 1 ( 0 for false, 1 for true ).



Example Input
Input 1:

    1
   / \
  2   2
 / \ / \
3  4 4  3
Input 2:

    1
   / \
  2   2
   \   \
   3    3


Example Output
Output 1:

 1
Output 2:

 0
 
 
 public class Solution {
    public int isSymmetric(TreeNode A) {
        if(mirror(A.left,A.right)==true)
        return 1;
        return 0;
    }
    boolean mirror(TreeNode A,TreeNode B){
        if(A==null && B==null)
        return true;
        if(A==null || B==null)
        return false;
        if(A.val!=B.val)
        return false;
        return mirror(A.left,B.right) && mirror(A.right,B.left);
    }
}
